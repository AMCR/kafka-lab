// Code generated by go-swagger; DO NOT EDIT.

package archive

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/AMCR/kafka-publisher/pkg/swagger-clients/archive/models"
)

// GetYearMonthJSONReader is a Reader for the GetYearMonthJSON structure.
type GetYearMonthJSONReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetYearMonthJSONReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetYearMonthJSONOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetYearMonthJSONUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 429:
		result := NewGetYearMonthJSONTooManyRequests()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /{year}/{month}.json] GetYearMonthJSON", response, response.Code())
	}
}

// NewGetYearMonthJSONOK creates a GetYearMonthJSONOK with default headers values
func NewGetYearMonthJSONOK() *GetYearMonthJSONOK {
	return &GetYearMonthJSONOK{}
}

/*
GetYearMonthJSONOK describes a response with status code 200, with default header values.

An array of articles.
*/
type GetYearMonthJSONOK struct {
	Payload *GetYearMonthJSONOKBody
}

// IsSuccess returns true when this get year month Json o k response has a 2xx status code
func (o *GetYearMonthJSONOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get year month Json o k response has a 3xx status code
func (o *GetYearMonthJSONOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get year month Json o k response has a 4xx status code
func (o *GetYearMonthJSONOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get year month Json o k response has a 5xx status code
func (o *GetYearMonthJSONOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get year month Json o k response a status code equal to that given
func (o *GetYearMonthJSONOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get year month Json o k response
func (o *GetYearMonthJSONOK) Code() int {
	return 200
}

func (o *GetYearMonthJSONOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /{year}/{month}.json][%d] getYearMonthJsonOK %s", 200, payload)
}

func (o *GetYearMonthJSONOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /{year}/{month}.json][%d] getYearMonthJsonOK %s", 200, payload)
}

func (o *GetYearMonthJSONOK) GetPayload() *GetYearMonthJSONOKBody {
	return o.Payload
}

func (o *GetYearMonthJSONOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetYearMonthJSONOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetYearMonthJSONUnauthorized creates a GetYearMonthJSONUnauthorized with default headers values
func NewGetYearMonthJSONUnauthorized() *GetYearMonthJSONUnauthorized {
	return &GetYearMonthJSONUnauthorized{}
}

/*
GetYearMonthJSONUnauthorized describes a response with status code 401, with default header values.

Unauthorized request, check api-key is set.
*/
type GetYearMonthJSONUnauthorized struct {
	Payload *GetYearMonthJSONUnauthorizedBody
}

// IsSuccess returns true when this get year month Json unauthorized response has a 2xx status code
func (o *GetYearMonthJSONUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get year month Json unauthorized response has a 3xx status code
func (o *GetYearMonthJSONUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get year month Json unauthorized response has a 4xx status code
func (o *GetYearMonthJSONUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this get year month Json unauthorized response has a 5xx status code
func (o *GetYearMonthJSONUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this get year month Json unauthorized response a status code equal to that given
func (o *GetYearMonthJSONUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the get year month Json unauthorized response
func (o *GetYearMonthJSONUnauthorized) Code() int {
	return 401
}

func (o *GetYearMonthJSONUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /{year}/{month}.json][%d] getYearMonthJsonUnauthorized %s", 401, payload)
}

func (o *GetYearMonthJSONUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /{year}/{month}.json][%d] getYearMonthJsonUnauthorized %s", 401, payload)
}

func (o *GetYearMonthJSONUnauthorized) GetPayload() *GetYearMonthJSONUnauthorizedBody {
	return o.Payload
}

func (o *GetYearMonthJSONUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetYearMonthJSONUnauthorizedBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetYearMonthJSONTooManyRequests creates a GetYearMonthJSONTooManyRequests with default headers values
func NewGetYearMonthJSONTooManyRequests() *GetYearMonthJSONTooManyRequests {
	return &GetYearMonthJSONTooManyRequests{}
}

/*
GetYearMonthJSONTooManyRequests describes a response with status code 429, with default header values.

Too many requests.  You reached your per minute or per day rate limit.
*/
type GetYearMonthJSONTooManyRequests struct {
}

// IsSuccess returns true when this get year month Json too many requests response has a 2xx status code
func (o *GetYearMonthJSONTooManyRequests) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get year month Json too many requests response has a 3xx status code
func (o *GetYearMonthJSONTooManyRequests) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get year month Json too many requests response has a 4xx status code
func (o *GetYearMonthJSONTooManyRequests) IsClientError() bool {
	return true
}

// IsServerError returns true when this get year month Json too many requests response has a 5xx status code
func (o *GetYearMonthJSONTooManyRequests) IsServerError() bool {
	return false
}

// IsCode returns true when this get year month Json too many requests response a status code equal to that given
func (o *GetYearMonthJSONTooManyRequests) IsCode(code int) bool {
	return code == 429
}

// Code gets the status code for the get year month Json too many requests response
func (o *GetYearMonthJSONTooManyRequests) Code() int {
	return 429
}

func (o *GetYearMonthJSONTooManyRequests) Error() string {
	return fmt.Sprintf("[GET /{year}/{month}.json][%d] getYearMonthJsonTooManyRequests", 429)
}

func (o *GetYearMonthJSONTooManyRequests) String() string {
	return fmt.Sprintf("[GET /{year}/{month}.json][%d] getYearMonthJsonTooManyRequests", 429)
}

func (o *GetYearMonthJSONTooManyRequests) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
GetYearMonthJSONOKBody get year month JSON o k body
swagger:model GetYearMonthJSONOKBody
*/
type GetYearMonthJSONOKBody struct {

	// copyright
	Copyright string `json:"copyright,omitempty"`

	// response
	Response *GetYearMonthJSONOKBodyResponse `json:"response,omitempty"`
}

// Validate validates this get year month JSON o k body
func (o *GetYearMonthJSONOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateResponse(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetYearMonthJSONOKBody) validateResponse(formats strfmt.Registry) error {
	if swag.IsZero(o.Response) { // not required
		return nil
	}

	if o.Response != nil {
		if err := o.Response.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getYearMonthJsonOK" + "." + "response")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getYearMonthJsonOK" + "." + "response")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get year month JSON o k body based on the context it is used
func (o *GetYearMonthJSONOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateResponse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetYearMonthJSONOKBody) contextValidateResponse(ctx context.Context, formats strfmt.Registry) error {

	if o.Response != nil {

		if swag.IsZero(o.Response) { // not required
			return nil
		}

		if err := o.Response.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getYearMonthJsonOK" + "." + "response")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getYearMonthJsonOK" + "." + "response")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetYearMonthJSONOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetYearMonthJSONOKBody) UnmarshalBinary(b []byte) error {
	var res GetYearMonthJSONOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetYearMonthJSONOKBodyResponse get year month JSON o k body response
swagger:model GetYearMonthJSONOKBodyResponse
*/
type GetYearMonthJSONOKBodyResponse struct {

	// docs
	Docs []*models.Article `json:"docs"`

	// meta
	Meta *GetYearMonthJSONOKBodyResponseMeta `json:"meta,omitempty"`
}

// Validate validates this get year month JSON o k body response
func (o *GetYearMonthJSONOKBodyResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDocs(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateMeta(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetYearMonthJSONOKBodyResponse) validateDocs(formats strfmt.Registry) error {
	if swag.IsZero(o.Docs) { // not required
		return nil
	}

	for i := 0; i < len(o.Docs); i++ {
		if swag.IsZero(o.Docs[i]) { // not required
			continue
		}

		if o.Docs[i] != nil {
			if err := o.Docs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getYearMonthJsonOK" + "." + "response" + "." + "docs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getYearMonthJsonOK" + "." + "response" + "." + "docs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetYearMonthJSONOKBodyResponse) validateMeta(formats strfmt.Registry) error {
	if swag.IsZero(o.Meta) { // not required
		return nil
	}

	if o.Meta != nil {
		if err := o.Meta.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getYearMonthJsonOK" + "." + "response" + "." + "meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getYearMonthJsonOK" + "." + "response" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get year month JSON o k body response based on the context it is used
func (o *GetYearMonthJSONOKBodyResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDocs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidateMeta(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetYearMonthJSONOKBodyResponse) contextValidateDocs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Docs); i++ {

		if o.Docs[i] != nil {

			if swag.IsZero(o.Docs[i]) { // not required
				return nil
			}

			if err := o.Docs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getYearMonthJsonOK" + "." + "response" + "." + "docs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getYearMonthJsonOK" + "." + "response" + "." + "docs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetYearMonthJSONOKBodyResponse) contextValidateMeta(ctx context.Context, formats strfmt.Registry) error {

	if o.Meta != nil {

		if swag.IsZero(o.Meta) { // not required
			return nil
		}

		if err := o.Meta.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getYearMonthJsonOK" + "." + "response" + "." + "meta")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getYearMonthJsonOK" + "." + "response" + "." + "meta")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetYearMonthJSONOKBodyResponse) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetYearMonthJSONOKBodyResponse) UnmarshalBinary(b []byte) error {
	var res GetYearMonthJSONOKBodyResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetYearMonthJSONOKBodyResponseMeta get year month JSON o k body response meta
swagger:model GetYearMonthJSONOKBodyResponseMeta
*/
type GetYearMonthJSONOKBodyResponseMeta struct {

	// hits
	Hits int64 `json:"hits,omitempty"`
}

// Validate validates this get year month JSON o k body response meta
func (o *GetYearMonthJSONOKBodyResponseMeta) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get year month JSON o k body response meta based on context it is used
func (o *GetYearMonthJSONOKBodyResponseMeta) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetYearMonthJSONOKBodyResponseMeta) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetYearMonthJSONOKBodyResponseMeta) UnmarshalBinary(b []byte) error {
	var res GetYearMonthJSONOKBodyResponseMeta
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetYearMonthJSONUnauthorizedBody get year month JSON unauthorized body
swagger:model GetYearMonthJSONUnauthorizedBody
*/
type GetYearMonthJSONUnauthorizedBody struct {

	// fault
	Fault *GetYearMonthJSONUnauthorizedBodyFault `json:"fault,omitempty"`
}

// Validate validates this get year month JSON unauthorized body
func (o *GetYearMonthJSONUnauthorizedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFault(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetYearMonthJSONUnauthorizedBody) validateFault(formats strfmt.Registry) error {
	if swag.IsZero(o.Fault) { // not required
		return nil
	}

	if o.Fault != nil {
		if err := o.Fault.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getYearMonthJsonUnauthorized" + "." + "fault")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getYearMonthJsonUnauthorized" + "." + "fault")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get year month JSON unauthorized body based on the context it is used
func (o *GetYearMonthJSONUnauthorizedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateFault(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetYearMonthJSONUnauthorizedBody) contextValidateFault(ctx context.Context, formats strfmt.Registry) error {

	if o.Fault != nil {

		if swag.IsZero(o.Fault) { // not required
			return nil
		}

		if err := o.Fault.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getYearMonthJsonUnauthorized" + "." + "fault")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getYearMonthJsonUnauthorized" + "." + "fault")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetYearMonthJSONUnauthorizedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetYearMonthJSONUnauthorizedBody) UnmarshalBinary(b []byte) error {
	var res GetYearMonthJSONUnauthorizedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetYearMonthJSONUnauthorizedBodyFault get year month JSON unauthorized body fault
swagger:model GetYearMonthJSONUnauthorizedBodyFault
*/
type GetYearMonthJSONUnauthorizedBodyFault struct {

	// detail
	Detail *GetYearMonthJSONUnauthorizedBodyFaultDetail `json:"detail,omitempty"`

	// faultstring
	Faultstring string `json:"faultstring,omitempty"`
}

// Validate validates this get year month JSON unauthorized body fault
func (o *GetYearMonthJSONUnauthorizedBodyFault) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateDetail(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetYearMonthJSONUnauthorizedBodyFault) validateDetail(formats strfmt.Registry) error {
	if swag.IsZero(o.Detail) { // not required
		return nil
	}

	if o.Detail != nil {
		if err := o.Detail.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getYearMonthJsonUnauthorized" + "." + "fault" + "." + "detail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getYearMonthJsonUnauthorized" + "." + "fault" + "." + "detail")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get year month JSON unauthorized body fault based on the context it is used
func (o *GetYearMonthJSONUnauthorizedBodyFault) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateDetail(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetYearMonthJSONUnauthorizedBodyFault) contextValidateDetail(ctx context.Context, formats strfmt.Registry) error {

	if o.Detail != nil {

		if swag.IsZero(o.Detail) { // not required
			return nil
		}

		if err := o.Detail.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getYearMonthJsonUnauthorized" + "." + "fault" + "." + "detail")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getYearMonthJsonUnauthorized" + "." + "fault" + "." + "detail")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetYearMonthJSONUnauthorizedBodyFault) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetYearMonthJSONUnauthorizedBodyFault) UnmarshalBinary(b []byte) error {
	var res GetYearMonthJSONUnauthorizedBodyFault
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
GetYearMonthJSONUnauthorizedBodyFaultDetail get year month JSON unauthorized body fault detail
swagger:model GetYearMonthJSONUnauthorizedBodyFaultDetail
*/
type GetYearMonthJSONUnauthorizedBodyFaultDetail struct {

	// errorcode
	Errorcode string `json:"errorcode,omitempty"`
}

// Validate validates this get year month JSON unauthorized body fault detail
func (o *GetYearMonthJSONUnauthorizedBodyFaultDetail) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this get year month JSON unauthorized body fault detail based on context it is used
func (o *GetYearMonthJSONUnauthorizedBodyFaultDetail) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetYearMonthJSONUnauthorizedBodyFaultDetail) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetYearMonthJSONUnauthorizedBodyFaultDetail) UnmarshalBinary(b []byte) error {
	var res GetYearMonthJSONUnauthorizedBodyFaultDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
