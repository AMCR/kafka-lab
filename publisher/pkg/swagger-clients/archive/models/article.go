// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Article article
//
// swagger:model Article
type Article struct {

	// id
	ID string `json:"_id,omitempty"`

	// byline
	Byline *Byline `json:"byline,omitempty"`

	// Document type (article, multimedia).
	DocumentType string `json:"document_type,omitempty"`

	// headline
	Headline *Headline `json:"headline,omitempty"`

	// keywords
	Keywords []*Keyword `json:"keywords"`

	// multimedia
	Multimedia []*Multimedia `json:"multimedia"`

	// Desk in the newsroom that worked on the story (Foreign, Metro, Sports, ...).
	NewsDesk string `json:"news_desk,omitempty"`

	// Page in print (e.g. 1).
	PrintPage string `json:"print_page,omitempty"`

	// Section in print (e.g. A).
	PrintSection string `json:"print_section,omitempty"`

	// Publication date.
	PubDate string `json:"pub_date,omitempty"`

	// Section that the article appeared in (New York, Sports, World, ...).
	SectionName string `json:"section_name,omitempty"`

	// snippet
	Snippet string `json:"snippet,omitempty"`

	// source
	Source string `json:"source,omitempty"`

	// Type of asset (Correction, News, Op-Ed, Review, Video, ...).
	TypeOfMaterial string `json:"type_of_material,omitempty"`

	// Uniquely identifies an asset.
	URI string `json:"uri,omitempty"`

	// Article URL.
	WebURL string `json:"web_url,omitempty"`

	// Number of words in the article.
	WordCount int64 `json:"word_count,omitempty"`
}

// Validate validates this article
func (m *Article) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateByline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHeadline(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeywords(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMultimedia(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Article) validateByline(formats strfmt.Registry) error {
	if swag.IsZero(m.Byline) { // not required
		return nil
	}

	if m.Byline != nil {
		if err := m.Byline.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("byline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("byline")
			}
			return err
		}
	}

	return nil
}

func (m *Article) validateHeadline(formats strfmt.Registry) error {
	if swag.IsZero(m.Headline) { // not required
		return nil
	}

	if m.Headline != nil {
		if err := m.Headline.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("headline")
			}
			return err
		}
	}

	return nil
}

func (m *Article) validateKeywords(formats strfmt.Registry) error {
	if swag.IsZero(m.Keywords) { // not required
		return nil
	}

	for i := 0; i < len(m.Keywords); i++ {
		if swag.IsZero(m.Keywords[i]) { // not required
			continue
		}

		if m.Keywords[i] != nil {
			if err := m.Keywords[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("keywords" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("keywords" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Article) validateMultimedia(formats strfmt.Registry) error {
	if swag.IsZero(m.Multimedia) { // not required
		return nil
	}

	for i := 0; i < len(m.Multimedia); i++ {
		if swag.IsZero(m.Multimedia[i]) { // not required
			continue
		}

		if m.Multimedia[i] != nil {
			if err := m.Multimedia[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("multimedia" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("multimedia" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this article based on the context it is used
func (m *Article) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateByline(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHeadline(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKeywords(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMultimedia(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Article) contextValidateByline(ctx context.Context, formats strfmt.Registry) error {

	if m.Byline != nil {

		if swag.IsZero(m.Byline) { // not required
			return nil
		}

		if err := m.Byline.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("byline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("byline")
			}
			return err
		}
	}

	return nil
}

func (m *Article) contextValidateHeadline(ctx context.Context, formats strfmt.Registry) error {

	if m.Headline != nil {

		if swag.IsZero(m.Headline) { // not required
			return nil
		}

		if err := m.Headline.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("headline")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("headline")
			}
			return err
		}
	}

	return nil
}

func (m *Article) contextValidateKeywords(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Keywords); i++ {

		if m.Keywords[i] != nil {

			if swag.IsZero(m.Keywords[i]) { // not required
				return nil
			}

			if err := m.Keywords[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("keywords" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("keywords" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Article) contextValidateMultimedia(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Multimedia); i++ {

		if m.Multimedia[i] != nil {

			if swag.IsZero(m.Multimedia[i]) { // not required
				return nil
			}

			if err := m.Multimedia[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("multimedia" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("multimedia" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Article) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Article) UnmarshalBinary(b []byte) error {
	var res Article
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
